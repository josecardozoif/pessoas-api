# IFMS - TADS 2025
# Guia de Deploy em Produ√ß√£o - Projeto Pessoa
# Tecnologias: Java, Spring Boot (API), PostgreSQL 16, Tomcat 11, HTML + JavaScript

=====================================================
üîß 1. CONFIGURA√á√ÉO DO BANCO POSTGRESQL (PORTA 5132)
=====================================================
Banco:        seu_banco
Usu√°rio:      postgres
Senha:        zeca
Porta:        5132

-- Crie a tabela pessoa com auto incremento de c√≥digo, CPF √∫nico e nome:
Arquivo: schema.sql

CREATE TABLE IF NOT EXISTS pessoa (
    codigo SERIAL PRIMARY KEY,
    cpf CHAR(11) UNIQUE NOT NULL,
    nome TEXT NOT NULL
);

Importar via terminal:
psql -h localhost -p 5132 -U postgres -d seu_banco -f schema.sql

=====================================================
üõ†Ô∏è 2. SPRING BOOT - CONFIGURA√á√ÉO DA API
=====================================================
Arquivo: src/main/resources/application.properties

spring.datasource.url=jdbc:postgresql://localhost:5132/seu_banco
spring.datasource.username=postgres
spring.datasource.password=zeca
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
server.port=8080

=====================================================
üì¶ 3. AJUSTES NO POM.XML PARA PRODU√á√ÉO (WAR)
=====================================================
<packaging>war</packaging>
<dependency>
  <groupId>org.springframework.boot</groupId>
  <artifactId>spring-boot-starter-web</artifactId>
  <exclusions>
    <exclusion>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-tomcat</artifactId>
    </exclusion>
  </exclusions>
</dependency>
<dependency>
  <groupId>org.springframework.boot</groupId>
  <artifactId>spring-boot-starter-tomcat</artifactId>
  <scope>provided</scope>
</dependency>
<build>
  <finalName>pessoa-api</finalName>
  <plugins>
    <plugin>
      <groupId>org.apache.maven.plugins</groupId>
      <artifactId>maven-war-plugin</artifactId>
      <version>3.3.1</version>
    </plugin>
  </plugins>
</build>

=====================================================
üöÄ 4. GERAR .WAR DA API
=====================================================
mvn clean package
Arquivo gerado: target/pessoa-api.war

=====================================================
üß© 5. AJUSTE NA CLASSE PRINCIPAL
=====================================================
package com.seuprojeto;

import org.springframework.boot.builder.SpringApplicationBuilder;
import org.springframework.boot.web.servlet.support.SpringBootServletInitializer;

public class ServletInitializer extends SpringBootServletInitializer {
  @Override
  protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {
    return application.sources(SuaClassePrincipalApplication.class);
  }
}

=====================================================
üñ•Ô∏è 6. DEPLOY NO TOMCAT 11
=====================================================
sudo cp target/pessoa-api.war /var/lib/tomcat11/webapps/
sudo systemctl restart tomcat11
http://localhost:8080/pessoa-api/api/pessoas

=====================================================
üåê 7. FRONT-END - P√ÅGINA √öNICA HTML
=====================================================
Arquivo: index.html
Colocar em: /var/lib/tomcat11/webapps/ROOT/index.html
Ajustar em JS: const API_URL = '/pessoa-api/api/pessoas';

=====================================================
‚úÖ 8. ESTRUTURA FINAL DO PROJETO
=====================================================
üìÅ projeto/
 ‚îú‚îÄ‚îÄ src/
 ‚îú‚îÄ‚îÄ pom.xml
 ‚îú‚îÄ‚îÄ schema.sql
 ‚îú‚îÄ‚îÄ target/pessoa-api.war
 ‚îî‚îÄ‚îÄ index.html
